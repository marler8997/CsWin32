#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable SA1306 // Field names should begin with lower-case letter
namespace ZigWin32
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Reflection.Metadata;
    using System.Reflection.PortableExecutable;
    using System.Text;
    using System.Threading;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    internal struct TypeGenInfo
    {
        public readonly TypeDefinition def;
        private readonly string name;

        public TypeGenInfo(MetadataReader mr, TypeDefinitionHandle handle)
        {
            this.def = mr.GetTypeDefinition(handle);
            this.name = mr.GetString(this.def.Name);
        }

        public string Zig
        {
            get { return this.name; }
        }
    }

    public class ZigGenerator
    {
        private const string WindowsWin32NamespacePrefix = "Windows.Win32.";
        private const string AutogeneratedMessage = "//! NOTE: this source file is autogenerated, DO NOT MODIFY";
        private const string Win32Zig = @"
pub const api = @import(""win32/api.zig"");
// TODO glue? header?

test """" {
    @import(""std"").testing.refAllDecls(@This());
}
";

        private readonly MetadataReader mr;
        private readonly CancellationToken cancel_token;

        private ZigGenerator(MetadataReader mr, CancellationToken cancel_token)
        {
            this.mr = mr;
            this.cancel_token = cancel_token;
        }

        // returns: the number of apis generated
        public static uint Generate(Stream metadata_stream, string out_dir, CancellationToken cancel_token)
        {
            using PEReader pe_reader = new PEReader(metadata_stream);
            MetadataReader mr = pe_reader.GetMetadataReader();
            ZigGenerator generator = new ZigGenerator(mr, cancel_token);
            Api[] apis = mr.TypeDefinitions.Select(mr.GetTypeDefinition)
                .Where(td => mr.StringComparer.Equals(td.Name, "Apis"))
                .Select(td => new Api(mr, td)).ToArray();
            {
                var win32_filename = Path.Combine(out_dir, "win32.zig");
                using var file_stream = new FileStream(win32_filename, FileMode.Create, FileAccess.Write, FileShare.Read);
                using var out_file = new StreamWriter(file_stream, Encoding.UTF8);
                out_file.WriteLine(AutogeneratedMessage);
                out_file.Write(Win32Zig);
            }

            string win32_dir = Path.Combine(out_dir, "win32");
            Directory.CreateDirectory(win32_dir);

            string api_dir = Path.Combine(win32_dir, "api");
            Directory.CreateDirectory(api_dir);

            foreach (Api api in apis)
            {
                string filepath = Path.Combine(api_dir, api.base_filename);
                using var file_stream = new FileStream(filepath, FileMode.Create, FileAccess.Write, FileShare.Read);
                using var out_file = new StreamWriter(file_stream, Encoding.UTF8);
                Console.WriteLine("Api: {0}", api.name);
                generator.GenerateApi(out_file, api);
            }

            {
                string filepath = Path.Combine(win32_dir, "api.zig");
                using var file_stream = new FileStream(filepath, FileMode.Create, FileAccess.Write, FileShare.Read);
                using var out_file = new StreamWriter(file_stream, Encoding.UTF8);
                out_file.WriteLine(AutogeneratedMessage);
                foreach (Api api in apis)
                {
                    out_file.WriteLine(@"pub const {0} = @import(""api/{1}"");", api.name_lower, api.base_filename);
                }

                out_file.WriteLine(@"test """" {{");
                out_file.WriteLine(@"    const api_count = {0};", apis.Length);
                out_file.WriteLine(@"    @setEvalBranchQuota(api_count);");
                out_file.WriteLine(@"    @import(""std"").testing.refAllDecls(@This());");
                out_file.WriteLine(@"}}");
            }

            return (uint)apis.Length;
        }

        private void GenerateApi(StreamWriter out_file, Api api)
        {
            out_file.WriteLine(AutogeneratedMessage);

            uint const_count = 0;
            foreach (FieldDefinitionHandle field_def in api.type_def.GetFields())
            {
                this.cancel_token.ThrowIfCancellationRequested();
                this.GenerateConstant(out_file, field_def);
                const_count += 1;
            }

            out_file.WriteLine("test \"\" {{");
            out_file.WriteLine("    const constant_export_count = {0};", const_count);
            out_file.WriteLine("    @setEvalBranchQuota(constant_export_count + 2); // TODO: why do I need these extra 2?");
            out_file.WriteLine("    @import(\"std\").testing.refAllDecls(@This());");
            out_file.WriteLine("}}");
        }

        private void GenerateConstant(StreamWriter out_file, FieldDefinitionHandle fieldDefHandle)
        {
            FieldDefinition fieldDef = this.mr.GetFieldDefinition(fieldDefHandle);

            FieldAttributes expected = FieldAttributes.Public | FieldAttributes.Static | FieldAttributes.Literal | FieldAttributes.HasDefault;
            if (fieldDef.Attributes != expected)
            {
                throw new InvalidOperationException(string.Format(
                    "Expected Constant FieldDefinition to have these attributes '{0}' but got '{1}'", expected, fieldDef.Attributes));
            }

            Debug.Assert(fieldDef.GetOffset() == -1, "Constant unexpectedly has an offset");
            Debug.Assert(fieldDef.GetRelativeVirtualAddress() == 0, "Constant unexpectedly has non-zero virtual address");

            // TODO: what is this signature?
            byte[] signature = this.mr.GetBlobBytes(fieldDef.Signature);
            out_file.WriteLine("// signature (TODO: what is this for?) {0} bytes: {1}", signature.Length, BitConverter.ToString(signature));

            // TODO: handle custom attributes
            // TODO: what is fieldDef.GetMarshallingDescriptor?
            foreach (CustomAttributeHandle attrHandle in fieldDef.GetCustomAttributes())
            {
                var attr = this.mr.GetCustomAttribute(attrHandle);

                // TODO: what to do with this?
                /*
                if (this.IsAttribute(att, SystemRuntimeInteropServices, nameof(GuidAttribute)))
                {
                    var args = att.DecodeValue(this.customAttributeTypeProvider);
                    guid = Guid.Parse((string)args.FixedArguments[0].Value!);
                }
                */
            }

            // NOTE: fieldDef.GetDeclaringType returns the type that contains the Constant
            //       I will probably use this to know where to put the constant but it has nothing
            //       to do with the type of the constant.
            // TypeGenInfo containingTypeInfo = this.GetTypeGenInfo(fieldDef.GetDeclaringType());
            string name = this.mr.GetString(fieldDef.Name);
            Constant constant = this.mr.GetConstant(fieldDef.GetDefaultValue());
            out_file.WriteLine("pub const {0} = 0; //: {1} = {2};", name, constant.TypeCode.ToZigType(), constant);
        }

        private bool IsAttribute(CustomAttribute attribute, string ns, string name)
        {
            StringHandle actualNamespace, actualName;
            if (attribute.Constructor.Kind == HandleKind.MemberReference)
            {
                MemberReference memberReference = this.mr.GetMemberReference((MemberReferenceHandle)attribute.Constructor);
                TypeReference parentRef = this.mr.GetTypeReference((TypeReferenceHandle)memberReference.Parent);
                actualNamespace = parentRef.Namespace;
                actualName = parentRef.Name;
            }
            else if (attribute.Constructor.Kind == HandleKind.MethodDefinition)
            {
                MethodDefinition methodDef = this.mr.GetMethodDefinition((MethodDefinitionHandle)attribute.Constructor);
                TypeDefinition typeDef = this.mr.GetTypeDefinition(methodDef.GetDeclaringType());
                actualNamespace = typeDef.Namespace;
                actualName = typeDef.Name;
            }
            else
            {
                throw new NotSupportedException("Unsupported attribute constructor kind: " + attribute.Constructor.Kind);
            }

            return this.mr.StringComparer.Equals(actualName, name) && this.mr.StringComparer.Equals(actualNamespace, ns);
        }

        private struct Api
        {
            public readonly TypeDefinition type_def;
            public readonly string name;
            public readonly string name_lower;
            public readonly string base_filename;

            public Api(MetadataReader mr, TypeDefinition type_def)
            {
                this.type_def = type_def;
                string api_namespace = mr.GetString(type_def.Namespace);
                Debug.Assert(
                    api_namespace.StartsWith(WindowsWin32NamespacePrefix, StringComparison.Ordinal),
                    "an Apis Type was not in the Windows.Win32 namespace");
                this.name = api_namespace.Substring(WindowsWin32NamespacePrefix.Length);
                this.name_lower = this.name.ToLowerInvariant();
                this.base_filename = this.name_lower + ".zig";
            }
        }
    }

    internal static class GenUtil
    {
        public static string ToZigType(this ConstantTypeCode typeCode)
        {
            return typeCode switch
            {
                ConstantTypeCode.Boolean => "bool",
                ConstantTypeCode.Char => "u8",
                ConstantTypeCode.SByte => "i8",
                ConstantTypeCode.Byte => "u8",
                ConstantTypeCode.Int16 => "i16",
                ConstantTypeCode.UInt16 => "u16",
                ConstantTypeCode.Int32 => "i32",
                ConstantTypeCode.UInt32 => "u32",
                ConstantTypeCode.Int64 => "i64",
                ConstantTypeCode.UInt64 => "u64",
                ConstantTypeCode.Single => "f32",
                ConstantTypeCode.Double => "f64",
                ConstantTypeCode.String => "[]const u8",
                ConstantTypeCode.NullReference => "typeof(null)",
                _ => throw new NotSupportedException("ConstantTypeCode not supported: " + typeCode),
            };
        }
    }
}
